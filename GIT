GIT COMMANDS
git init:
This command let us create a new reposiitory.A hidden .git directory is added to the folder.Most of the git command do not work outside.initialized project , so this is the first command you will run in a project

GIT ADD:
This command add your changes to staging area where you can compare you local version with remote repo code.It is mandatory to stage the code before commit(push to remote) using git add command.
To stage all files use (.)  git add . in the same repo.

git commit:
This command saves your changes to your local repository.Everytime you commit you have to add a small message about the changes you made.This will help to keep track of the changes later.
git comiit -m "this is my 1st version"
git config --global user.email "emailid"
git config --global user.name "name"

PUSH CHANGES TO CENTRAL REPO
1. git remote add origin repourl

PUSH FROM LOCAL REPO TO CENTRAL REPO
git push:> git push -u origin master(BRANCH NAME)
This command push your changes from local repository to your remote repository. One can only push the committed changes.

IF YOU WANT TO GET A CODE FROM DIVISION BRANCH TO YOUR MAIN BRANCH
1. git merge 2. git rebase. 3. git cherry-pick

git merge: it is a way of combining changes from one branch (SOurce br.) into another branch( target br)
git rebase: it is a way of moving the changes from one branch to another branch
git cherry-pick: it is easy whern there are one or two commits.

BRANCH: seprate or isolated development activity

commands for a BRANCH
git checkout: This command helps to switch to an existing branch or create a new branch.

Q. WHY WE CREATE A BRANCH?
ANS.>> instead of making the changes directly to your existing branch i.e. by default master/main branch, so you will create a new branch and you start a developmet on this new branch.
you created a branch beacause by making sure that any new changes like a few changes or braking changes that you are adding to your existing application is not affecting the existing functionality.

FORK: you create a entire copy of your original source
clone: download a spacific repo.

git diff: telling you to exact change that are
git log: for checking previous version/code/show commit logs 

What are the stages in Git?
There are total of 4 stages in Git
1. Workspace: - It is the place where we can create files physically and modify. Being a Git user, we work in this work space.
2. Staging area/Indexing area: - In this area, Git takes a snapshot for every version. It is a buffer zone between workspace and local repository. We can’t see this region because it is virtual.
3. Local repository: - It is the place where Git stores all commit locally. It is a hidden directory so that no one can delete it accidentally. Every commit will have unique commit ID.
4. Central repository: - It is the place where Git stores all commit centrally. It belongs to everyone who is working in your project. Git Hub is one of the central repositories. Used for storing the code and sharing the code to others in the team.

12. What is Git stash?
We create multiple branches to work simultaneously on multiple features. But to work on multiple tasks simultaneously in one branch (i.e. on one feature), 
we use git stash. Stash is a temporary repository where we can store our content and bring it back whenever we want to continue with our work with that stored content.
It removes content inside file from working directory and puts in stashing store and gives clean working directory so that we can start new work freshly. 
Later on you can bring back that stashed items to working directory and can resume your work on that file. Git stash applicable to modified files. Not new files. 
Once we finish our work, we can remove all stashed items form stash repository.

What is Git Reset?
Git Reset command is used to remove changes form staging area. This is bringing back file form staging area to work directory. We use this command before commit


What is Git Revert?
Git Revert command is used to remove changes from all 3 stages (work directory, staging area and local repository). We use this command after commit. Sometimes, we commit accidentally and later on we realize that
we shouldn’t have done that. For this we use Git revert. This operation will generate new commit ID with some meaningful message to ignore previous commit where mistake is there.
But, here we can’t completely eliminate the commit where mistake is there. Because Git tracks each and every change.











